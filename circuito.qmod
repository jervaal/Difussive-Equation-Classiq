qfunc main(tau: real, output reg: qbit[]) {
  allocate(7.0, reg);
  inplace_prepare_amplitudes([
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.1826,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0
  ], 0.0, reg);
  PHASE(1.5708, reg[0]);
  H(reg[0]);
  RZ(((2 * tau) * 0.5039) * 10.0, reg[0]);
  H(reg[0]);
  PHASE(-1.5708, reg[0]);
  CX(reg[1], reg[0]);
  PHASE(1.5708, reg[1]);
  H(reg[1]);
  control (reg[0:1]) {
    RZ(((2 * tau) * 0.5039) * 10.0, reg[1]);
  }
  H(reg[1]);
  PHASE(-1.5708, reg[1]);
  CX(reg[1], reg[0]);
  CX(reg[2], reg[0]);
  CX(reg[2], reg[1]);
  PHASE(1.5708, reg[2]);
  H(reg[2]);
  control (reg[0:2]) {
    RZ(((2 * tau) * 0.5039) * 10.0, reg[2]);
  }
  H(reg[2]);
  PHASE(-1.5708, reg[2]);
  CX(reg[2], reg[1]);
  CX(reg[2], reg[0]);
  CX(reg[3], reg[0]);
  CX(reg[3], reg[1]);
  CX(reg[3], reg[2]);
  PHASE(1.5708, reg[3]);
  H(reg[3]);
  control (reg[0:3]) {
    RZ(((2 * tau) * 0.5039) * 10.0, reg[3]);
  }
  H(reg[3]);
  PHASE(-1.5708, reg[3]);
  CX(reg[3], reg[2]);
  CX(reg[3], reg[1]);
  CX(reg[3], reg[0]);
  CX(reg[4], reg[0]);
  CX(reg[4], reg[1]);
  CX(reg[4], reg[2]);
  CX(reg[4], reg[3]);
  PHASE(1.5708, reg[4]);
  H(reg[4]);
  control (reg[0:4]) {
    RZ(((2 * tau) * 0.5039) * 10.0, reg[4]);
  }
  H(reg[4]);
  PHASE(-1.5708, reg[4]);
  CX(reg[4], reg[3]);
  CX(reg[4], reg[2]);
  CX(reg[4], reg[1]);
  CX(reg[4], reg[0]);
  CX(reg[5], reg[0]);
  CX(reg[5], reg[1]);
  CX(reg[5], reg[2]);
  CX(reg[5], reg[3]);
  CX(reg[5], reg[4]);
  PHASE(1.5708, reg[5]);
  H(reg[5]);
  control (reg[0:5]) {
    RZ(((2 * tau) * 0.5039) * 10.0, reg[5]);
  }
  H(reg[5]);
  PHASE(-1.5708, reg[5]);
  CX(reg[5], reg[4]);
  CX(reg[5], reg[3]);
  CX(reg[5], reg[2]);
  CX(reg[5], reg[1]);
  CX(reg[5], reg[0]);
  CX(reg[6], reg[0]);
  CX(reg[6], reg[1]);
  CX(reg[6], reg[2]);
  CX(reg[6], reg[3]);
  CX(reg[6], reg[4]);
  CX(reg[6], reg[5]);
  PHASE(1.5708, reg[6]);
  H(reg[6]);
  control (reg[0:6]) {
    RZ(((2 * tau) * 0.5039) * 10.0, reg[6]);
  }
  H(reg[6]);
  PHASE(-1.5708, reg[6]);
  CX(reg[6], reg[5]);
  CX(reg[6], reg[4]);
  CX(reg[6], reg[3]);
  CX(reg[6], reg[2]);
  CX(reg[6], reg[1]);
  CX(reg[6], reg[0]);
}
